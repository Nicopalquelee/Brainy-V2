[{"filePath":"C:\\developer\\backend\\src\\app.module.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getRepositoryToken' is defined but never used.","line":10,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'User' is defined but never used.","line":11,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Document' is defined but never used.","line":12,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":18}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Module } from '@nestjs/common';\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { ConfigModule, ConfigService } from '@nestjs/config';\r\nimport appConfig from './config';\r\nimport { AuthModule } from './auth/auth.module';\r\nimport { UsersModule } from './users/users.module';\r\nimport { DocumentsModule } from './documents/documents.module';\r\nimport { ChatbotModule } from './chatbot/chatbot.module';\r\nimport { HealthModule } from './health/health.module';\r\nimport { getRepositoryToken } from '@nestjs/typeorm';\r\nimport { User } from './users/user.entity';\r\nimport { Document } from './documents/document.entity';\r\n\r\nconst skipDb = process.env.SKIP_DB === 'true';\r\n\r\n@Module({\r\n  imports: [\r\n    ConfigModule.forRoot({ isGlobal: true, load: [appConfig] }),\r\n    // Conditionally include TypeORM only when SKIP_DB is not true\r\n    ...(skipDb\r\n      ? []\r\n      : [\r\n          TypeOrmModule.forRootAsync({\r\n            imports: [ConfigModule],\r\n            inject: [ConfigService],\r\n            useFactory: (configService: ConfigService) => {\r\n              const db = configService.get('app.db');\r\n              return {\r\n                type: 'postgres',\r\n                host: db.host,\r\n                port: db.port,\r\n                username: db.user,\r\n                password: db.password,\r\n                database: db.database,\r\n                autoLoadEntities: true,\r\n                synchronize: true\r\n              };\r\n            }\r\n          })\r\n        ]),\r\n    AuthModule,\r\n    UsersModule,\r\n    DocumentsModule,\r\n    ChatbotModule,\r\n    HealthModule\r\n  ],\r\n  controllers: [],\r\n  providers: []\r\n})\r\nexport class AppModule {}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\developer\\backend\\src\\auth\\auth.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\developer\\backend\\src\\auth\\auth.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\developer\\backend\\src\\auth\\auth.service.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":23,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[726,729],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[726,729],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'passwordHash' is assigned a value but never used.","line":17,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":27,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Injectable } from '@nestjs/common';\r\nimport { UsersService } from '../users/users.service';\r\nimport * as jwt from 'jsonwebtoken';\r\nimport * as bcrypt from 'bcrypt';\r\n\r\n@Injectable()\r\nexport class AuthService {\r\n  constructor(private usersService: UsersService) {}\r\n\r\n  async validateUser(email: string, pass: string) {\r\n    const user = await this.usersService.findByEmail(email);\r\n    if (!user) return null;\r\n    const match = await bcrypt.compare(pass, user.passwordHash || '');\r\n    if (match) {\r\n      // omit password\r\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n      const { passwordHash, ...result } = user;\r\n      return result;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  async login(user: any) {\r\n    const payload = { sub: user.id, email: user.email, role: user.role };\r\n    const token = jwt.sign(payload, process.env.JWT_SECRET || 'changeme', {\r\n      expiresIn: '8h'\r\n    });\r\n    return { accessToken: token };\r\n  }\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\developer\\backend\\src\\auth\\jwt-auth.guard.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'err' is defined but never used.","line":16,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":17}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { CanActivate, ExecutionContext, Injectable, UnauthorizedException } from '@nestjs/common';\r\nimport * as jwt from 'jsonwebtoken';\r\n\r\n@Injectable()\r\nexport class JwtAuthGuard implements CanActivate {\r\n  canActivate(context: ExecutionContext): boolean {\r\n    const req = context.switchToHttp().getRequest();\r\n    const auth = req.headers?.authorization as string | undefined;\r\n    if (!auth) throw new UnauthorizedException('No authorization header');\r\n    const [type, token] = auth.split(' ');\r\n    if (type !== 'Bearer' || !token) throw new UnauthorizedException('Invalid token');\r\n    try {\r\n      const payload = jwt.verify(token, process.env.JWT_SECRET || 'changeme');\r\n      req.user = payload;\r\n      return true;\r\n    } catch (err) {\r\n      throw new UnauthorizedException('Token invalid or expired');\r\n    }\r\n  }\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\developer\\backend\\src\\auth\\jwt.strategy.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\developer\\backend\\src\\auth\\roles.decorator.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\developer\\backend\\src\\auth\\roles.guard.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\developer\\backend\\src\\chatbot\\chatbot.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\developer\\backend\\src\\chatbot\\chatbot.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\developer\\backend\\src\\chatbot\\chatbot.service.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":31,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1038,1041],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1038,1041],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Injectable } from '@nestjs/common';\r\nimport fetch from 'node-fetch';\r\nimport { DocumentsService } from '../documents/documents.service';\r\n\r\n@Injectable()\r\nexport class ChatbotService {\r\n  constructor(private docs: DocumentsService) {}\r\n\r\n  async query(text: string) {\r\n    // simple passthrough to OpenAI (placeholder)\r\n    const key = process.env.OPENAI_API_KEY;\r\n    if (!key) return { error: 'OpenAI key not configured' };\r\n\r\n    // Minimal call - do not expose key to frontend\r\n    const res = await fetch('https://api.openai.com/v1/chat/completions', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${key}`\r\n      },\r\n      body: JSON.stringify({\r\n        model: 'gpt-4o-mini',\r\n        messages: [{ role: 'user', content: text }],\r\n        max_tokens: 500\r\n      })\r\n    });\r\n    const body = await res.json();\r\n\r\n    // recommend related documents by naive keyword match\r\n    const docs = await this.docs.list();\r\n    const related = docs.filter((d: any) =>\r\n      text.toLowerCase().includes((d.subject || d.title || '').toLowerCase())\r\n    );\r\n\r\n    return { answer: body, relatedDocuments: related.slice(0, 5) };\r\n  }\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\developer\\backend\\src\\config\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\developer\\backend\\src\\documents\\document.entity.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\developer\\backend\\src\\documents\\documents.controller.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":41,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1377,1380],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1377,1380],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":44,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1566,1569],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1566,1569],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":45,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1590,1593],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1590,1593],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":47,"column":18,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":47,"endColumn":43}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Body, Controller, Get, Param, Post, UploadedFile, UseInterceptors, Query } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { DocumentsService } from './documents.service';\nimport { CreateDocumentDto } from './dto/create-document.dto';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { diskStorage } from 'multer';\nimport { extname } from 'path';\n\n@ApiTags('documents')\n@Controller('documents')\nexport class DocumentsController {\n  constructor(private docs: DocumentsService) {}\n\n  @Post()\n  @UseInterceptors(\n    FileInterceptor('file', {\n      storage: diskStorage({\n        destination: './uploads',\n        filename: (_req, file, cb) => {\n          const name = Date.now();\n          const fileExt = extname(file.originalname);\n          cb(null, `${name}${fileExt}`);\n        }\n      }),\n      limits: { fileSize: 10 * 1024 * 1024 }, // 10MB\n      fileFilter: (_req, file, cb) => {\n        const allowed = [\n          'application/pdf',\n          'text/plain',\n          'application/msword',\n          'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n          'application/epub+zip'\n        ];\n        if (!allowed.includes(file.mimetype)) {\n          return cb(new Error('Invalid file type'), false);\n        }\n        cb(null, true);\n      }\n    })\n  )\n  async create(@UploadedFile() file: any, @Body() dto: CreateDocumentDto) {\n    try {\n      const contentUrl = file ? `/uploads/${file.filename}` : dto.contentUrl;\n      return await this.docs.create({ ...dto, contentUrl } as any);\n    } catch (err: any) {\n      // Normalize multer and other errors as BadRequest\n      throw new (require('@nestjs/common').BadRequestException)(err.message || 'Upload failed');\n    }\n  }\n\n  @Get()\n  list() {\n    return this.docs.list();\n  }\n\n  @Get('search')\n  search(@Query('q') q?: string) {\n    const qstr = (q || '').trim();\n    return this.docs.search(qstr);\n  }\n\n  @Get(':id')\n  get(@Param('id') id: string) {\n    return this.docs.find(+id);\n  }\n\n  @Post(':id/rate')\n  rate(@Param('id') id: string, @Body() body: { score: number }) {\n    return this.docs.rate(+id, body.score);\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\developer\\backend\\src\\documents\\documents.module.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":17,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[565,568],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[565,568],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":24,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[713,716],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[713,716],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":26,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[803,806],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[803,806],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":43,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1207,1210],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1207,1210],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Module } from '@nestjs/common';\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { getRepositoryToken } from '@nestjs/typeorm';\r\nimport { DocumentsService } from './documents.service';\r\nimport { DocumentsController } from './documents.controller';\r\nimport { Document } from './document.entity';\r\n\r\nconst skipDb = process.env.SKIP_DB === 'true';\r\n\r\nclass InMemoryDocRepo {\r\n  private data: Document[] = [];\r\n  private id = 1;\r\n\r\n  create(entity: Partial<Document>) {\r\n    return { id: this.id++, ...entity } as Document;\r\n  }\r\n  async save(entity: any) {\r\n    this.data.push(entity as Document);\r\n    return entity;\r\n  }\r\n  async find() {\r\n    return this.data;\r\n  }\r\n  async findOneBy(criteria: any) {\r\n    const key = Object.keys(criteria)[0];\r\n    return this.data.find((d) => (d as any)[key] === criteria[key]) || null;\r\n  }\r\n}\r\n\r\n@Module({\r\n  imports: skipDb ? [] : [TypeOrmModule.forFeature([Document])],\r\n  providers: [\r\n    ...(skipDb\r\n      ? [\r\n          {\r\n            provide: 'DOCUMENT_REPOSITORY',\r\n            useFactory: () => new InMemoryDocRepo()\r\n          }\r\n        ]\r\n      : [\r\n          {\r\n            provide: 'DOCUMENT_REPOSITORY',\r\n            useFactory: (repo: any) => repo,\r\n            inject: [getRepositoryToken(Document)]\r\n          }\r\n        ]),\r\n    DocumentsService\r\n  ],\r\n  controllers: [DocumentsController],\r\n  exports: [DocumentsService]\r\n})\r\nexport class DocumentsModule {}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\developer\\backend\\src\\documents\\documents.service.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":6,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[239,242],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[239,242],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":7,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[259,262],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[259,262],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":7,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[273,276],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[273,276],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":8,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[297,300],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[297,300],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":9,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[327,330],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[327,330],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":9,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[341,344],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[341,344],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":17,"column":98,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":101,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[641,644],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[641,644],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":26,"column":102,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":105,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1003,1006],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1003,1006],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":46,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1471,1474],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1471,1474],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":61,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2155,2158],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2155,2158],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":62,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":62,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2192,2195],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2192,2195],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":62,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":62,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2200,2203],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2200,2203],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":63,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2242,2245],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2242,2245],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Inject, Injectable } from '@nestjs/common';\nimport { Document } from './document.entity';\nimport { CreateDocumentDto } from './dto/create-document.dto';\n\nexport interface IDocumentRepository {\n  create(entity: Partial<Document>): any;\n  save(entity: any): Promise<any>;\n  find(): Promise<any[]>;\n  findOneBy(criteria: any): Promise<any | null>;\n}\n\n@Injectable()\nexport class DocumentsService {\n  constructor(@Inject('DOCUMENT_REPOSITORY') private repo: IDocumentRepository) {}\n\n  create(dto: CreateDocumentDto & { author?: string }) {\n    const doc = this.repo.create({ ...dto, visits: 0, rating: 0, contentUrl: dto.contentUrl } as any);\n    return this.repo.save(doc);\n  }\n\n  async list(page = 1, pageSize = 12) {\n    const all = await this.repo.find();\n    const total = all.length;\n    const start = Math.max(0, (page - 1) * pageSize);\n    const items = all.slice(start, start + pageSize);\n    return { items, total, page, pageSize, totalPages: Math.max(1, Math.ceil(total / pageSize)) } as any;\n  }\n\n  find(id: number) {\n    return this.repo.findOneBy({ id });\n  }\n\n  async rate(id: number, score: number) {\n    const doc = await this.find(id);\n    if (!doc) return null;\n    doc.rating = ((doc.rating || 0) + score) / 2;\n    return this.repo.save(doc);\n  }\n\n  async search(q: string) {\n    if (!q || q.trim() === '') return this.repo.find();\n    const all = await this.repo.find();\n    const qLower = q.toLowerCase();\n\n    const scored = all\n      .map((d: any) => {\n        const title = (d.title || '').toString().toLowerCase();\n        const subject = (d.subject || '').toString().toLowerCase();\n        const content = (d.content || d.contentUrl || '').toString().toLowerCase();\n        let score = 0;\n        if (title.includes(qLower)) score += 5;\n        if (subject.includes(qLower)) score += 3;\n        if (content.includes(qLower)) score += 2;\n        // boost by rating and visits (normalized)\n        const rating = Number(d.rating || 0);\n        const visits = Number(d.visits || 0);\n        score += Math.min(rating, 5) * 1.5;\n        score += Math.log(1 + visits);\n        return { doc: d, score };\n      })\n      .filter((s: any) => s.score > 0)\n      .sort((a: any, b: any) => b.score - a.score)\n      .map((s: any) => s.doc);\n\n    return scored;\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\developer\\backend\\src\\documents\\dto\\create-document.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\developer\\backend\\src\\health\\health.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\developer\\backend\\src\\health\\health.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\developer\\backend\\src\\main.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":29,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1007,1010],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1007,1010],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":29,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1017,1020],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1017,1020],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":31,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1125,1128],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1125,1128],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":31,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1135,1138],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1135,1138],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import 'reflect-metadata';\r\nimport { NestFactory } from '@nestjs/core';\r\nimport { AppModule } from './app.module';\r\nimport { ValidationPipe } from '@nestjs/common';\r\nimport { ConfigService } from '@nestjs/config';\r\nimport * as dotenv from 'dotenv';\r\nimport { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';\r\nimport * as express from 'express';\r\n\r\ndotenv.config();\r\n\r\nasync function bootstrap() {\r\n  const app = await NestFactory.create(AppModule);\r\n  app.useGlobalPipes(new ValidationPipe({ whitelist: true }));\r\n\r\n  const config = new DocumentBuilder()\r\n    .setTitle('Portal Académico USS - API')\r\n    .setDescription('API para gestión académica, documentos y chatbot')\r\n    .setVersion('0.1.0')\r\n    .addTag('auth')\r\n    .addTag('users')\r\n    .addTag('documents')\r\n    .addTag('chat')\r\n    .build();\r\n\r\n  const document = SwaggerModule.createDocument(app, config);\r\n  SwaggerModule.setup('docs', app, document);\r\n  // alias route for compatibility\r\n  app.getHttpAdapter().get('/api-docs', (req: any, res: any) => res.redirect('/docs'));\r\n  // raw JSON OpenAPI spec\r\n  app.getHttpAdapter().get('/docs-json', (req: any, res: any) => res.json(document));\r\n\r\n  // enable CORS with origin from config\r\n  const configService = app.get(ConfigService);\r\n  const corsOrigin = configService.get('app.corsOrigin') || '*';\r\n  app.enableCors({ origin: corsOrigin, credentials: true });\r\n\r\n  // set API global prefix\r\n  app.setGlobalPrefix('api');\r\n\r\n  // serve uploads as static files at /uploads\r\n  app.use('/uploads', express.static('uploads'));\r\n\r\n  const port = process.env.PORT || 3000;\r\n  await app.listen(port);\r\n  console.log(`Server listening on http://localhost:${port}`);\r\n}\r\n\r\nbootstrap();\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\developer\\backend\\src\\users\\dto\\create-user.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\developer\\backend\\src\\users\\user.entity.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\developer\\backend\\src\\users\\users.controller.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":23,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[725,728],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[725,728],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":34,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1044,1047],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1044,1047],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":39,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1133,1136],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1133,1136],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Body, Controller, Get, Param, Put, UseGuards, Req } from '@nestjs/common';\r\nimport { ApiTags } from '@nestjs/swagger';\r\nimport { UsersService } from './users.service';\r\nimport { CreateUserDto } from './dto/create-user.dto';\r\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\r\nimport { Roles } from '../auth/roles.decorator';\r\nimport { RolesGuard } from '../auth/roles.guard';\r\n\r\n@ApiTags('users')\r\n@Controller('users')\r\nexport class UsersController {\r\n  constructor(private usersService: UsersService) {}\r\n\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles('admin')\r\n  @Get()\r\n  async list() {\r\n    return this.usersService.findAll();\r\n  }\r\n\r\n  @UseGuards(JwtAuthGuard)\r\n  @Get('me')\r\n  async getMe(@Req() req: any) {\r\n    return this.usersService.findOne(req.user.sub);\r\n  }\r\n\r\n  @Get(':id')\r\n  async get(@Param('id') id: string) {\r\n    return this.usersService.findOne(+id);\r\n  }\r\n\r\n  @Put(':id')\r\n  async update(@Param('id') id: string, @Body() body: Partial<CreateUserDto>) {\r\n    return this.usersService.update(+id, body as any);\r\n  }\r\n\r\n  @UseGuards(JwtAuthGuard)\r\n  @Get('profile')\r\n  async profile(@Req() req: any) {\r\n    const user = req.user;\r\n    if (!user) return null;\r\n    return this.usersService.findOne(user.userId);\r\n  }\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\developer\\backend\\src\\users\\users.module.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":17,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[536,539],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[536,539],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":24,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[680,683],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[680,683],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":26,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[770,773],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[770,773],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":49,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1408,1411],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1408,1411],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Module } from '@nestjs/common';\r\nimport { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\r\nimport { UsersService } from './users.service';\r\nimport { UsersController } from './users.controller';\r\nimport { User } from './user.entity';\r\n\r\nconst skipDb = process.env.SKIP_DB === 'true';\r\n\r\n// Simple in-memory repository fallback\r\nclass InMemoryUserRepo {\r\n  private data: User[] = [];\r\n  private id = 1;\r\n\r\n  create(entity: Partial<User>) {\r\n    return { id: this.id++, ...entity } as User;\r\n  }\r\n  async save(entity: any) {\r\n    this.data.push(entity as User);\r\n    return entity;\r\n  }\r\n  async find() {\r\n    return this.data;\r\n  }\r\n  async findOneBy(criteria: any) {\r\n    const key = Object.keys(criteria)[0];\r\n    return this.data.find((d) => (d as any)[key] === criteria[key]) || null;\r\n  }\r\n  async update(id: number, payload: Partial<User>) {\r\n    const idx = this.data.findIndex((d) => d.id === id);\r\n    if (idx === -1) return null;\r\n    this.data[idx] = { ...this.data[idx], ...payload } as User;\r\n    return this.data[idx];\r\n  }\r\n}\r\n\r\n@Module({\r\n  imports: skipDb ? [] : [TypeOrmModule.forFeature([User])],\r\n  providers: [\r\n    ...(skipDb\r\n      ? [\r\n          {\r\n            provide: 'USER_REPOSITORY',\r\n            useFactory: () => new InMemoryUserRepo(),\r\n          }\r\n        ]\r\n      : [\r\n          {\r\n            provide: 'USER_REPOSITORY',\r\n            useFactory: (repo: any) => repo,\r\n            inject: [getRepositoryToken(User)]\r\n          }\r\n        ]),\r\n    UsersService\r\n  ],\r\n  controllers: [UsersController],\r\n  exports: [UsersService]\r\n})\r\nexport class UsersModule {}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\developer\\backend\\src\\users\\users.service.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":7,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[255,258],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[255,258],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":8,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[276,279],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[276,279],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":8,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[290,293],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[290,293],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":9,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[315,318],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[315,318],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[346,349],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[346,349],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[360,363],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[360,363],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":11,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[428,431],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[428,431],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":26,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[879,882],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[879,882],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Inject, Injectable } from '@nestjs/common';\r\nimport { User } from './user.entity';\r\nimport { CreateUserDto } from './dto/create-user.dto';\r\nimport * as bcrypt from 'bcrypt';\r\n\r\nexport interface IUserRepository {\r\n  create(entity: Partial<User>): any;\r\n  save(entity: any): Promise<any>;\r\n  find(): Promise<any[]>;\r\n  findOneBy(criteria: any): Promise<any | null>;\r\n  update(id: number, payload: Partial<User>): Promise<any>;\r\n}\r\n\r\n@Injectable()\r\nexport class UsersService {\r\n  constructor(@Inject('USER_REPOSITORY') private usersRepository: IUserRepository) {}\r\n\r\n  async create(dto: CreateUserDto) {\r\n    const salt = await bcrypt.genSalt(10);\r\n    const hash = await bcrypt.hash(dto.password, salt);\r\n    const user = this.usersRepository.create({\r\n      email: dto.email,\r\n      name: dto.name,\r\n      role: dto.role || 'student',\r\n      passwordHash: hash\r\n    } as any);\r\n    return this.usersRepository.save(user);\r\n  }\r\n\r\n  async findAll() {\r\n    return this.usersRepository.find();\r\n  }\r\n\r\n  async findOne(id: number) {\r\n    return this.usersRepository.findOneBy({ id });\r\n  }\r\n\r\n  async findByEmail(email: string) {\r\n    return this.usersRepository.findOneBy({ email });\r\n  }\r\n\r\n  async update(id: number, payload: Partial<User>) {\r\n    await this.usersRepository.update(id, payload);\r\n    return this.findOne(id);\r\n  }\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\developer\\backend\\test\\auth.service.spec.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":6,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[184,187],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[184,187],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":11,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[296,299],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[296,299],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":40,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1460,1463],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1460,1463],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":53,"column":89,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":92,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1995,1998],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1995,1998],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":62,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":62,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2388,2391],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2388,2391],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":63,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2444,2447],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2444,2447],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":70,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2712,2715],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2712,2715],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":83,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3251,3254],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3251,3254],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":91,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":91,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3579,3582],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3579,3582],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { AuthService } from '../src/auth/auth.service';\nimport * as bcrypt from 'bcrypt';\n\ndescribe('AuthService (unit)', () => {\n  let service: AuthService;\n  const mockUsersService: any = {\n    findByEmail: jest.fn()\n  };\n\n  beforeEach(() => {\n    service = new AuthService(mockUsersService as any);\n    jest.clearAllMocks();\n  });\n\n  describe('validateUser', () => {\n    it('returns null when user not found', async () => {\n      mockUsersService.findByEmail.mockResolvedValue(null);\n      const res = await service.validateUser('no@user', 'pass');\n      expect(res).toBeNull();\n    });\n\n    it('returns null when password does not match', async () => {\n      const pwd = 'secret';\n      const wrongPwd = 'wrong';\n      const hash = await bcrypt.hash(pwd, 10);\n      const user = { id: 1, email: 'a@b.com', passwordHash: hash, role: 'student' };\n      mockUsersService.findByEmail.mockResolvedValue(user);\n      const res = await service.validateUser(user.email, wrongPwd);\n      expect(res).toBeNull();\n    });\n\n    it('returns user data when password matches', async () => {\n      const pwd = 'secret';\n      const hash = await bcrypt.hash(pwd, 10);\n      const user = { id: 1, email: 'a@b.com', passwordHash: hash, role: 'student' };\n      mockUsersService.findByEmail.mockResolvedValue(user);\n      const res = await service.validateUser(user.email, pwd);\n      expect(res).not.toBeNull();\n      expect(res.email).toBe(user.email);\n      expect((res as any).passwordHash).toBeUndefined();\n    });\n\n    it('handles bcrypt comparison errors', async () => {\n      const user = { id: 1, email: 'a@b.com', passwordHash: 'invalid-hash', role: 'student' };\n      mockUsersService.findByEmail.mockResolvedValue(user);\n      const res = await service.validateUser(user.email, 'password');\n      expect(res).toBeNull();\n    });\n  });\n\n  describe('login', () => {\n    it('returns an accessToken', async () => {\n      const token = await service.login({ id: 5, email: 'x@x.com', role: 'student' } as any);\n      expect(token).toHaveProperty('accessToken');\n      expect(typeof token.accessToken).toBe('string');\n    });\n\n    it('generates different tokens for different users', async () => {\n      const user1 = { id: 1, email: 'user1@test.com', role: 'student' };\n      const user2 = { id: 2, email: 'user2@test.com', role: 'admin' };\n      \n      const token1 = await service.login(user1 as any);\n      const token2 = await service.login(user2 as any);\n      \n      expect(token1.accessToken).not.toBe(token2.accessToken);\n    });\n\n    it('includes user information in token', async () => {\n      const user = { id: 123, email: 'test@example.com', role: 'student' };\n      const token = await service.login(user as any);\n      \n      // Decode JWT to verify payload\n      const payload = JSON.parse(Buffer.from(token.accessToken.split('.')[1], 'base64').toString());\n      expect(payload.sub).toBe(user.id);\n      expect(payload.email).toBe(user.email);\n      expect(payload.role).toBe(user.role);\n    });\n  });\n\n  describe('additional login scenarios', () => {\n    it('handles login with different user roles', async () => {\n      const adminUser = { id: 2, email: 'admin@test.com', role: 'admin' };\n      const token = await service.login(adminUser as any);\n      \n      expect(token).toHaveProperty('accessToken');\n      expect(typeof token.accessToken).toBe('string');\n    });\n\n    it('handles login with missing user data gracefully', async () => {\n      const incompleteUser = { id: 3, email: 'incomplete@test.com' };\n      const token = await service.login(incompleteUser as any);\n      \n      expect(token).toHaveProperty('accessToken');\n      expect(typeof token.accessToken).toBe('string');\n    });\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\developer\\backend\\test\\documents.service.spec.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":5,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[160,163],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[160,163],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":8,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[200,203],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[200,203],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":11,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[273,276],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[273,276],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":20,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[520,523],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[520,523],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.","line":31,"column":5,"nodeType":"Line","messageId":"tsIgnoreInsteadOfExpectError","endLine":31,"endColumn":18,"suggestions":[{"messageId":"replaceTsIgnoreWithTsExpectError","fix":{"range":[770,783],"text":"// @ts-expect-error"},"desc":"Replace \"@ts-ignore\" with \"@ts-expect-error\"."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":32,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[827,830],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[827,830],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":36,"column":82,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":85,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[971,974],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[971,974],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":37,"column":82,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":85,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1058,1061],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1058,1061],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":43,"column":107,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":110,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1320,1323],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1320,1323],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":44,"column":109,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":112,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1434,1437],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1434,1437],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":57,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1919,1922],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1919,1922],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":58,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2001,2004],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2001,2004],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":66,"column":123,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":126,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2375,2378],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2375,2378],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":67,"column":115,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":67,"endColumn":118,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2495,2498],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2495,2498],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":68,"column":87,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":68,"endColumn":90,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2587,2590],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2587,2590],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":72,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2763,2766],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2763,2766],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":73,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2853,2856],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2853,2856],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":78,"column":127,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":130,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3223,3226],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3223,3226],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'d2' is assigned a value but never used.","line":79,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":79,"endColumn":13},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":79,"column":140,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":79,"endColumn":143,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3368,3371],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3368,3371],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'d3' is assigned a value but never used.","line":80,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":80,"endColumn":13},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":80,"column":131,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":80,"endColumn":134,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3504,3507],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3504,3507],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":82,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":82,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3623,3626],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3623,3626],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":98,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":98,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4191,4194],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4191,4194],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":107,"column":99,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":102,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4600,4603],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4600,4603],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":119,"column":110,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":119,"endColumn":113,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5086,5089],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5086,5089],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":125,"column":112,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":125,"endColumn":115,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5347,5350],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5347,5350],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":133,"column":93,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":133,"endColumn":96,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5644,5647],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5644,5647],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":149,"column":104,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":149,"endColumn":107,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6160,6163],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6160,6163],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":150,"column":109,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":150,"endColumn":112,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6274,6277],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6274,6277],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":160,"column":93,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":160,"endColumn":96,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6633,6636],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6633,6636],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":167,"column":122,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":167,"endColumn":125,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6939,6942],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6939,6942],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":168,"column":126,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":168,"endColumn":129,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7070,7073],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7070,7073],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":169,"column":117,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":169,"endColumn":120,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7192,7195],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7192,7195],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":34,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { DocumentsService } from '../src/documents/documents.service';\n\n// Minimal in-memory repo matching IDocumentRepository\nclass InMemoryDocRepo {\n  items: any[] = [];\n  id = 1;\n\n  create(entity: any) {\n    return { id: this.id++, ...entity };\n  }\n  async save(entity: any) {\n    const idx = this.items.findIndex((i) => i.id === entity.id);\n    if (idx === -1) this.items.push(entity);\n    else this.items[idx] = entity;\n    return entity;\n  }\n  async find() {\n    return this.items;\n  }\n  async findOneBy(criteria: any) {\n    return this.items.find((i) => i.id === criteria.id) || null;\n  }\n}\n\ndescribe('DocumentsService (in-memory)', () => {\n  let service: DocumentsService;\n  let repo: InMemoryDocRepo;\n\n  beforeEach(() => {\n    repo = new InMemoryDocRepo();\n    // @ts-ignore\n    service = new DocumentsService(repo as any);\n  });\n\n  it('creates and lists documents', async () => {\n    await service.create({ title: 'Doc1', subject: 'Math', contentUrl: 'u1' } as any);\n    await service.create({ title: 'Doc2', subject: 'Algo', contentUrl: 'u2' } as any);\n    const all = await service.list();\n    expect(all.items).toHaveLength(2);\n  });\n\n  it('rates a document and affects search ranking', async () => {\n    await service.create({ title: 'Sorting algorithms', subject: 'Algo', contentUrl: 'u1', rating: 0 } as any);\n    await service.create({ title: 'Linear algebra notes', subject: 'Math', contentUrl: 'u2', rating: 0 } as any);\n    // rate first doc high\n    const docs = await service.list();\n    const id1 = docs.items[0].id;\n    await service.rate(id1, 5);\n    const results = await service.search('algorithm');\n    expect(results.length).toBeGreaterThan(0);\n    expect(results[0].title.toLowerCase()).toContain('algorithm');\n  });\n\n  it('empty query returns all documents', async () => {\n    // reset repo\n    repo.items = [];\n    await service.create({ title: 'A', subject: 'S1', contentUrl: 'c1' } as any);\n    await service.create({ title: 'B', subject: 'S2', contentUrl: 'c2' } as any);\n    const all = await service.list();\n    const results = await service.search('');\n    expect(results.length).toBe(all.items.length);\n  });\n\n  it('search is case-insensitive and matches title/subject/content', async () => {\n    repo.items = [];\n    await service.create({ title: 'Advanced Algorithms', subject: 'CS', contentUrl: 'contains searchterm in content' } as any);\n    await service.create({ title: 'Intro to Programming', subject: 'searchterm in subject', contentUrl: 'u2' } as any);\n    await service.create({ title: 'Unrelated', subject: 'none', contentUrl: 'u3' } as any);\n    const r1 = await service.search('SEARCHTERM');\n    expect(r1.length).toBeGreaterThanOrEqual(2);\n    // ensure items with the term are returned\n    expect(r1.some((d: any) => d.title.toLowerCase().includes('advanced'))).toBeTruthy();\n    expect(r1.some((d: any) => d.title.toLowerCase().includes('intro') || (d.subject || '').toLowerCase().includes('searchterm'))).toBeTruthy();\n  });\n\n  it('ranking prefers higher rating and visits even if match strength differs', async () => {\n    repo.items = [];\n    const d1 = await service.create({ title: 'Weak match title', subject: 'math', contentUrl: 'u1', rating: 0, visits: 0 } as any);\n    const d2 = await service.create({ title: 'Strong match title searchterm', subject: 'algo', contentUrl: 'u2', rating: 0, visits: 0 } as any);\n    const d3 = await service.create({ title: 'Moderate match', subject: 'searchterm', contentUrl: 'u3', rating: 0, visits: 0 } as any);\n    // artificially boost d1 by setting rating and visits directly in repo\n    const item1 = repo.items.find((i: any) => i.id === d1.id);\n    item1.rating = 5;\n    item1.visits = 500;\n    await repo.save(item1);\n    const results = await service.search('searchterm');\n    // top result should be the boosted d1 because rating+visits overcome weaker textual match\n    expect(results[0].id).toBe(d1.id);\n  });\n\n  it('creates document with all required fields', async () => {\n    const docData = {\n      title: 'Test Document',\n      subject: 'Mathematics',\n      contentUrl: '/uploads/test.pdf',\n      author: 'Test Author'\n    };\n    const created = await service.create(docData as any);\n    expect(created.title).toBe(docData.title);\n    expect(created.subject).toBe(docData.subject);\n    expect(created.contentUrl).toBe(docData.contentUrl);\n    expect(created.author).toBe(docData.author);\n    expect(created.id).toBeDefined();\n  });\n\n  it('updates document rating correctly', async () => {\n    const doc = await service.create({ title: 'Test Doc', subject: 'Math', contentUrl: 'url' } as any);\n    const updated = await service.rate(doc.id, 4.5);\n    expect(updated.rating).toBeGreaterThan(0);\n    expect(updated.rating).toBeLessThanOrEqual(5);\n  });\n\n  it('handles rating with invalid document ID', async () => {\n    const result = await service.rate(999, 5);\n    expect(result).toBeNull();\n  });\n\n  it('handles document creation with visits field', async () => {\n    const doc = await service.create({ title: 'Test Doc', subject: 'Math', contentUrl: 'url', visits: 0 } as any);\n    expect(doc).toBeDefined();\n    expect(doc.title).toBe('Test Doc');\n  });\n\n  it('handles document creation with rating field', async () => {\n    const doc = await service.create({ title: 'Test Doc', subject: 'Math', contentUrl: 'url', rating: 4.5 } as any);\n    expect(doc).toBeDefined();\n    expect(doc.title).toBe('Test Doc');\n  });\n\n  it('lists documents with pagination', async () => {\n    // Create multiple documents\n    for (let i = 0; i < 5; i++) {\n      await service.create({ title: `Doc ${i}`, subject: 'Math', contentUrl: `url${i}` } as any);\n    }\n    \n    const result = await service.list(1, 3);\n    expect(result.items).toHaveLength(3);\n    expect(result.total).toBe(5);\n    expect(result.page).toBe(1);\n    expect(result.pageSize).toBe(3);\n  });\n\n  it('handles empty search results', async () => {\n    const results = await service.search('nonexistent');\n    expect(results).toHaveLength(0);\n  });\n\n  it('searches by author name', async () => {\n    await service.create({ title: 'Doc1', subject: 'Math', contentUrl: 'url1', author: 'John Doe' } as any);\n    await service.create({ title: 'Doc2', subject: 'Physics', contentUrl: 'url2', author: 'Jane Smith' } as any);\n    \n    const results = await service.search('John');\n    expect(results.length).toBeGreaterThanOrEqual(0);\n    if (results.length > 0) {\n      expect(results[0].author).toBe('John Doe');\n    }\n  });\n\n  it('handles special characters in search', async () => {\n    await service.create({ title: 'C++ Programming', subject: 'CS', contentUrl: 'url1' } as any);\n    const results = await service.search('C++');\n    expect(results.length).toBeGreaterThan(0);\n  });\n\n  it('sorts results by relevance score', async () => {\n    repo.items = [];\n    await service.create({ title: 'Perfect match', subject: 'searchterm', contentUrl: 'url1', rating: 3, visits: 10 } as any);\n    await service.create({ title: 'Good match', subject: 'searchterm related', contentUrl: 'url2', rating: 5, visits: 5 } as any);\n    await service.create({ title: 'Partial match', subject: 'other', contentUrl: 'url3', rating: 4, visits: 20 } as any);\n    \n    const results = await service.search('searchterm');\n    expect(results[0].title).toBe('Perfect match');\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\developer\\backend\\test\\health.controller.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\developer\\backend\\test\\users.service.spec.ts","messages":[{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.","line":21,"column":5,"nodeType":"Line","messageId":"tsIgnoreInsteadOfExpectError","endLine":21,"endColumn":18,"suggestions":[{"messageId":"replaceTsIgnoreWithTsExpectError","fix":{"range":[566,579],"text":"// @ts-expect-error"},"desc":"Replace \"@ts-ignore\" with \"@ts-expect-error\"."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":36,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[884,887],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[884,887],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":50,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1499,1502],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1499,1502],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":56,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":56,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1749,1752],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1749,1752],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":63,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2010,2013],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2010,2013],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":70,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2289,2292],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2289,2292],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":77,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":77,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2519,2522],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2519,2522],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'created' is assigned a value but never used.","line":78,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":78,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":91,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":91,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3040,3043],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3040,3043],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":107,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3602,3605],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3602,3605],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":114,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":114,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3750,3753],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3750,3753],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":133,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":133,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4467,4470],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4467,4470],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":139,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":139,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4752,4755],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4752,4755],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { DataSource } from 'typeorm';\nimport { UsersService } from '../src/users/users.service';\nimport { User } from '../src/users/user.entity';\nimport { Repository } from 'typeorm';\nimport * as bcrypt from 'bcrypt';\n\ndescribe('UsersService (basic)', () => {\n  let ds: DataSource;\n  let repo: Repository<User>;\n  let service: UsersService;\n\n  beforeAll(async () => {\n    ds = new DataSource({\n      type: 'sqlite',\n      database: ':memory:',\n      entities: [User],\n      synchronize: true\n    });\n    await ds.initialize();\n    repo = ds.getRepository(User);\n    // @ts-ignore\n    service = new UsersService(repo);\n  });\n\n  afterAll(async () => {\n    await ds.destroy();\n  });\n\n  beforeEach(async () => {\n    // Clear database before each test\n    await repo.clear();\n  });\n\n  describe('create', () => {\n    it('creates a user with hashed password', async () => {\n      const dto: any = { email: 'test@uss.cl', password: 'pass123', name: 'Test' };\n      const created = await service.create(dto);\n      expect(created.id).toBeGreaterThan(0);\n      expect(created.email).toBe(dto.email);\n      expect(created.name).toBe(dto.name);\n      expect(created.role).toBe('student');\n      \n      const found = await repo.findOneBy({ id: created.id });\n      expect(found.email).toBe(dto.email);\n      const match = await bcrypt.compare(dto.password, found.passwordHash as string);\n      expect(match).toBe(true);\n    });\n\n    it('creates admin user when role is specified', async () => {\n      const dto: any = { email: 'admin@uss.cl', password: 'admin123', name: 'Admin', role: 'admin' };\n      const created = await service.create(dto);\n      expect(created.role).toBe('admin');\n    });\n\n    it('handles duplicate email', async () => {\n      const dto: any = { email: 'duplicate@uss.cl', password: 'pass123', name: 'Test' };\n      await service.create(dto);\n      \n      await expect(service.create(dto)).rejects.toThrow();\n    });\n\n    it('handles invalid email format gracefully', async () => {\n      const dto: any = { email: 'invalid-email', password: 'pass123', name: 'Test' };\n      const result = await service.create(dto);\n      expect(result).toBeDefined();\n      expect(result.email).toBe('invalid-email');\n    });\n\n    it('validates required fields', async () => {\n      const dto: any = { email: 'test@uss.cl' }; // Missing password and name\n      await expect(service.create(dto)).rejects.toThrow();\n    });\n  });\n\n  describe('findByEmail', () => {\n    it('finds user by email', async () => {\n      const dto: any = { email: 'find@uss.cl', password: 'pass123', name: 'Find User' };\n      const created = await service.create(dto);\n      \n      const found = await service.findByEmail(dto.email);\n      expect(found).not.toBeNull();\n      expect(found.email).toBe(dto.email);\n    });\n\n    it('returns null for non-existent email', async () => {\n      const found = await service.findByEmail('nonexistent@uss.cl');\n      expect(found).toBeNull();\n    });\n\n    it('handles case-sensitive email search', async () => {\n      const dto: any = { email: 'CaseTest@uss.cl', password: 'pass123', name: 'Case Test' };\n      await service.create(dto);\n      \n      const found = await service.findByEmail('CaseTest@uss.cl');\n      expect(found).not.toBeNull();\n      expect(found.email).toBe('CaseTest@uss.cl');\n    });\n  });\n\n  describe('findByEmail edge cases', () => {\n    it('handles empty email', async () => {\n      const found = await service.findByEmail('');\n      expect(found).toBeNull();\n    });\n\n    it('handles null email', async () => {\n      const found = await service.findByEmail(null as any);\n      expect(found).toBeNull();\n    });\n  });\n\n  describe('update', () => {\n    it('updates user information', async () => {\n      const dto: any = { email: 'update@uss.cl', password: 'pass123', name: 'Update Test' };\n      const created = await service.create(dto);\n      \n      const updateData = { name: 'Updated Name', role: 'admin' };\n      const updated = await service.update(created.id, updateData);\n      \n      expect(updated.name).toBe('Updated Name');\n      expect(updated.role).toBe('admin');\n    });\n\n    it('handles update with non-existent ID', async () => {\n      const updateData = { name: 'Updated Name' };\n      const result = await service.update(999, updateData);\n      expect(result).toBeNull();\n    });\n  });\n\n  describe('additional create scenarios', () => {\n    it('creates user with different roles', async () => {\n      const dto: any = { email: 'admin@uss.cl', password: 'admin123', name: 'Admin User', role: 'admin' };\n      const created = await service.create(dto);\n      expect(created.role).toBe('admin');\n    });\n\n    it('handles user creation with special characters in name', async () => {\n      const dto: any = { email: 'special@uss.cl', password: 'pass123', name: 'José María' };\n      const created = await service.create(dto);\n      expect(created.name).toBe('José María');\n    });\n  });\n\n  describe('findAll', () => {\n    it('returns all users', async () => {\n      const users = [\n        { email: 'user1@uss.cl', password: 'pass123', name: 'User 1' },\n        { email: 'user2@uss.cl', password: 'pass123', name: 'User 2' },\n        { email: 'user3@uss.cl', password: 'pass123', name: 'User 3' }\n      ];\n      \n      for (const user of users) {\n        await service.create(user);\n      }\n      \n      const allUsers = await service.findAll();\n      expect(allUsers).toHaveLength(3);\n    });\n\n    it('returns empty array when no users exist', async () => {\n      const allUsers = await service.findAll();\n      expect(allUsers).toHaveLength(0);\n    });\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]}]